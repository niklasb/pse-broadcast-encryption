package cryptocast.crypto;

import java.math.BigInteger;

/**
 * Represents a cyclic group $(G, \otimes)$ of prime order $q$ over a subset 
 * $G$ of the values of type T, generated by $g$.
 * Let $e$ denote the identity element of $G$ and $x^{-1}$ the inverse of $x$.
 * @param <T> The values we work on.
 */
public abstract class CyclicGroupOfPrimeOrder<T> {
    private IntegersModuloPrime modQ;
    private T g;
    private BigInteger q;
    
    protected CyclicGroupOfPrimeOrder(T g, BigInteger q) {
        this.g = g;
        this.q = q;
        this.modQ = new IntegersModuloPrime(q);
    }
    
    /**
     * @return The generator $g$ of the group
     */
    public T getGenerator() {
        return g;
    }
    
    /**
     * @return $g^k$, where $g$ is the generator of the group
     */
    public T getPowerOfG(BigInteger k) {
        return pow(getGenerator(), k);
    }
    
    /**
     * @return The order $q$ of the group
     */
    public BigInteger getOrder() {
        return q;
    }
    
    /**
     * @return The field of integers modulo the order $q$ of the group
     */
    public IntegersModuloPrime getFieldModOrder() {
        return modQ;
    }
    
    /**
     * @param a The first operand
     * @param b The second operand 
     * @return $a \otimes b$ 
     */
    public abstract T combine(T a, T b);
    
    /**
     * @param a The base
     * @param k The number of combinations of a with itself
     * @return $a^k = \bigotimes_{i=1}^{k} a$ 
     */
    public abstract T pow(T a, BigInteger k);
    
    /**
     * @return The unique inverse element $a^{-1} \in G$, such that
     *         $a \otimes a^{-1} = e$
     */
    public abstract T invert(T a);
    
    /**
     * @return $e$, the identity element of $G$
     */
    public abstract T identity();
}
